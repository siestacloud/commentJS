{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,0BAA0B;AAC1B;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;ACb3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,6BAA6B;AAC7B,4BAA4B;AAC5B,wBAAwB;AACxB,yBAAyB;AACzB,4BAA4B;AAC5B,+BAA+B;AAC/B,+BAA+B;AAC/B,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,4BAA4B;AAC5B,2BAA2B;AAC3B,uBAAuB;AACvB,wBAAwB;AACxB,2BAA2B;AAC3B,8BAA8B;AAC9B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,qCAAqC;AACrC,mFAAmF;AACnF,+CAA+C;AAC/C;AACA,0CAA0C;AAC1C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA,kBAAkB,iBAAiB;AACnC;AACA,gBAAgB,iBAAiB;AACjC,+BAA+B;AAC/B,mCAAmC,wBAAwB;AAC3D,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,4CAA4C;AAC5C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C;AAC5C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AClLW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,6BAA6B;AAC7B,4BAA4B;AAC5B,wBAAwB;AACxB,yBAAyB;AACzB,4BAA4B;AAC5B,2BAA2B;AAC3B,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,4BAA4B;AAC5B,2BAA2B;AAC3B,uBAAuB;AACvB,wBAAwB;AACxB,2BAA2B;AAC3B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA,kBAAkB,iBAAiB;AACnC;AACA,gBAAgB,iBAAiB;AACjC,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,eAAe;AACtE;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iBAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,qCAAqC,kDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAM;AACnC;AACA,wDAAwD,iBAAiB;AACzE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,4CAA4C;AAC5C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C;AAC5C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;ACzNgB;AACE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;AChDgB;AACvC,qBAAqB,sDAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;ACrCoB;AACE;AAC5C,qBAAqB,sDAAO;AAC5B;AACA;AACA,0BAA0B,wDAAO;AACjC;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,uDAAuD;AACvD,6DAA6D;AAC7D,4DAA4D;AAC5D,yCAAyC;AACzC,+CAA+C;AAC/C,mDAAmD;AACnD,iDAAiD;AACjD,6CAA6C;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,iEAAiE,2DAA2D;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,qEAAqE;AACrE;AACA,wDAAwD;AACxD,8CAA8C;AAC9C;AACA,mBAAmB;AACnB,sEAAsE;AACtE;AACA;AACA;AACA,oDAAoD;AACpD,kEAAkE;AAClE;AACA,SAAS;AACT,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,2DAA2D;AACxI;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,mDAAmD;AAChI;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,qEAAqE;AAClJ;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,+CAA+C;AAC/C,mDAAmD;AACnD,iDAAiD;AACjD,6CAA6C;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AC7IkB;AACxC;AACA,oBAAoB,yDAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;UCjBrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNuD;AACf;AACH;AACV;AAC3B;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAK;AAC3B,uBAAuB,yDAAM;AAC7B,4BAA4B,mEAAW;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://sf-ts-final-task/./src/scss/style.scss?98af","webpack://sf-ts-final-task/./src/js/controllers/controllers.js","webpack://sf-ts-final-task/./src/js/core/answer.js","webpack://sf-ts-final-task/./src/js/core/comment.js","webpack://sf-ts-final-task/./src/js/db/storage.js","webpack://sf-ts-final-task/./src/js/models/models.js","webpack://sf-ts-final-task/./src/js/views/events/events.js","webpack://sf-ts-final-task/./src/js/views/views.js","webpack://sf-ts-final-task/webpack/bootstrap","webpack://sf-ts-final-task/webpack/runtime/define property getters","webpack://sf-ts-final-task/webpack/runtime/hasOwnProperty shorthand","webpack://sf-ts-final-task/webpack/runtime/make namespace object","webpack://sf-ts-final-task/./src/js/app.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","class Controllers {\n    constructor() {\n        this.privateModels;\n        this.privateView;\n    }\n    SetPrivateModels(el) { this.privateModels = el; }\n    SetPrivateViews(el) { this.privateView = el; }\n    //? Отображение главной страницы \n    PageMain() {\n        this.privateModels.GetPreviosComments();\n        this.privateView.DisplayMain(); //* отображение раздела комментарии (подключение функционала)\n    }\n}\nexport default Controllers;\n","class Answer {\n    constructor() {\n        this.privateText;\n        this.privateUnic;\n        this.privateIcon;\n        this.privateName;\n        this.privateLikes;\n        this.privateTimestamp;\n        this.privateFavorite;\n        this.privateCreateAt;\n        this.privateCommentLink;\n        this.privateCommentName;\n    }\n    SetPrivateName(v) { this.privateName = v; }\n    SetPrivateUnic(v) { this.privateUnic = v; }\n    SetPrivateIcon(v) { this.privateIcon = v; }\n    SetPrivateTimestamp(v) { this.privateTimestamp = v; }\n    SetPrivateCreateAt(v) { this.privateCreateAt = v; }\n    SetPrivateText(v) { this.privateText = v; }\n    SetPrivateLikes(v) { this.privateLikes = v; }\n    SetPrivateFavorite(v) { this.privateFavorite = v; }\n    SetPrivateCommentLink(v) { this.privateCommentLink = v; }\n    SetPrivateCommentName(v) { this.privateCommentName = v; }\n    GetPrivateName() { return this.privateName; }\n    GetPrivateUnic() { return this.privateUnic; }\n    GetPrivateIcon() { return this.privateIcon; }\n    GetPrivateTimestamp() { return this.privateTimestamp; }\n    GetPrivateCreateAt() { return this.privateCreateAt; }\n    GetPrivateText() { return this.privateText; }\n    GetPrivateLikes() { return this.privateLikes; }\n    GetPrivateFavorite() { return this.privateFavorite; }\n    GetPrivateCommentLink() { return this.privateCommentLink; }\n    GetPrivateCommentName() { return this.privateCommentName; }\n    //? PublicDisplayFieldsForAnswer рендер поля ввода и кнопки отправки ответа на коментарий \n    PublicDisplayFieldsForAnswer(innerHTMLElement, commentUnic, commentName) {\n        let wrapper = document.createElement('div');\n        innerHTMLElement.after(wrapper);\n        const newInput = `\n    <div class=\"comments__new new j-answer-input\">\n      <div class=\"new__user user\">\n        <img src=\"img/user1.png\" alt=\"\">\n        <span>Максим Авдеенко</span>\n      </div>\n      <div class=\"new__wrapper\">\n        <div class=\"new__input\">\n          <span>Макс. 1000 символов</span>\n          <textarea name=\"msg\" maxlength=\"1000\" rows=\"2\" class=\"new__textarea j-answer-textarea\"\n            placeholder=\"Введите текст сообщения...\"></textarea>\n        </div>\n        <button type=\"submit\" class=\"new__btn j-btn-send-answer\">Отправить </button>\n      </div>\n    </div>\n    `;\n        wrapper.innerHTML += newInput;\n        let textAreaElement = document.querySelector(\".j-answer-textarea\");\n        let tBtn = document.querySelector(\".j-btn-send-answer\");\n        //* обработчик на кнопку отправки ответа\n        tBtn.addEventListener('click', () => {\n            if (!textAreaElement.value) {\n                return;\n            } //* обработка пустого поля ввода\n            let inputHtmlField = document.querySelector(\".j-answer-input\");\n            inputHtmlField.remove(); //* удаляю форму ввода ответа\n            this.PuplicSetAnswer(textAreaElement.value, commentUnic, commentName); //* заполняю ответ данными и привязывую его к комментарию\n            this.PuplicDisplayAnswer(wrapper); //* рендер коментария\n            this.PublicSaveAnswer();\n            this.PublicInitBtnMakeLike(); //* подключение логики формирования свойства \"избранный комментарий\"  \n        });\n    }\n    //? PuplicDisplayAnswer отображение ответа к коментарию\n    PuplicDisplayAnswer(innerHTMLElement) {\n        let favoriteTextTemplate, favoriteCssMod;\n        this.privateFavorite ? favoriteTextTemplate = \"в избранном\" : favoriteTextTemplate = \"в избранное\";\n        this.privateFavorite ? favoriteCssMod = \"m-favorites\" : favoriteCssMod = \"\";\n        let wrapper = document.createElement('div');\n        const newComment = `\n    <div class=\"comments__item\" val=\"${this.privateUnic}\">\n    <div class=\"comments__user user\">\n      <img src=\"${this.privateIcon}\" alt=\"\">\n      <div class=\"comments__wrap\">\n        <span>${this.privateName}</span>\n        <img style=\"width:20px;\"src=\"img/arrow-grey.png\" alt=\"\">\n        <span class=\"m-answerto\">${this.privateCommentName}</span>\n        <span class=\"date\">${this.privateCreateAt}</span>\n      </div>\n    </div>\n    <div class=\"comments__wrapper\">\n      <div class=\"comments__text\">\n        <span>${this.privateText}</span>\n      </div>\n      <div class=\"comments__btns\">\n        <div class=\"comments__like\">\n          <p id=\"dis\" class=\"min\"><span>-</span></p>\n          <p id=\"count\" class=\"count\">${this.privateLikes}</p>\n          <p id=\"plus\" class=\"plus\"><span>+</span></p>\n        </div>\n      </div>\n      <div class=\"comments__ans\"></div>\n      `;\n        wrapper.innerHTML += newComment;\n        innerHTMLElement.insertBefore(wrapper, innerHTMLElement.firstChild);\n    }\n    PuplicSetAnswer(text, commentUnic, commentName) {\n        this.privateCommentLink = commentUnic;\n        this.privateCommentName = commentName;\n        this.privateUnic = Math.random();\n        this.privateTimestamp = Date.now();\n        this.privateText = text;\n        this.privateIcon = \"img/user1.png\";\n        this.privateName = \"Siesta Cloud\";\n        this.privateLikes = 0;\n        this.privateFavorite = false;\n        this.privateCreateAt = new Date().toLocaleTimeString('en-GB', {\n            hour: \"numeric\",\n            minute: \"numeric\",\n            day: \"numeric\",\n            month: \"numeric\"\n        });\n    }\n    //privateSaveComment добавляю новый комментарий в массив в localStorage\n    PublicSaveAnswer() {\n        let items = localStorage.getItem(\"comments\");\n        let userComments = JSON.parse(items);\n        if (!userComments) {\n            return;\n        }\n        userComments.forEach(comment => {\n            if (comment.privateUnic == this.privateCommentLink) {\n                let answers = comment.privateAnswers;\n                if (answers) {\n                    answers.forEach(answer => {\n                        if (answer.privateUnic === this.privateUnic) {\n                            if (!answers) {\n                                return;\n                            }\n                            answers = answers.filter(item => item !== answer);\n                        }\n                    });\n                }\n                else {\n                    answers = [];\n                }\n                answers.push(this);\n                comment.privateAnswers = answers;\n            }\n        });\n        localStorage.setItem(\"comments\", JSON.stringify(userComments));\n    }\n    //? PublicInitBtnMakeLike определение обработчиков на кнопки \"лайк\" и \"дизлайк\" комментария\n    PublicInitBtnMakeLike() {\n        let commentHtmlEl = document.querySelector(`[val=\"${this.privateUnic}\"]`);\n        let likeBtn = commentHtmlEl.querySelector(\".plus\");\n        let likeBtnWrapper = likeBtn.parentElement;\n        let disLikeBtn = likeBtnWrapper.querySelector(\"#dis\");\n        let counter = likeBtnWrapper.querySelector(\"#count\");\n        let oldCount = +counter.innerHTML; // 0\n        likeBtn.addEventListener('click', () => {\n            let counter = likeBtnWrapper.querySelector(\"#count\");\n            let count = +counter.innerHTML; // 0\n            let newCount = +count + 1; //1\n            if (count - oldCount == 0 || count - oldCount == -1) {\n                counter.innerHTML = newCount.toString();\n                this.privateLikes = newCount;\n                this.PublicSaveAnswer();\n            }\n        });\n        disLikeBtn.addEventListener('click', () => {\n            let counter = likeBtnWrapper.querySelector(\"#count\");\n            let count = +counter.innerHTML; // 0\n            let newCount = +count - 1; // 0 -1\n            if (count - oldCount == 1 || count - oldCount == 0) {\n                counter.innerHTML = newCount.toString();\n                this.privateLikes = newCount;\n                this.PublicSaveAnswer();\n            }\n        });\n    }\n}\nexport default Answer;\n","import Answer from \"./answer.js\";\nclass Comment {\n    constructor() {\n        this.privateText;\n        this.privateUnic;\n        this.privateIcon;\n        this.privateName;\n        this.privateLikes;\n        this.privateAnswers;\n        this.privateFavorite;\n        this.privateCreateAt;\n        this.privateTimestamp;\n    }\n    SetPrivateName(v) { this.privateName = v; }\n    SetPrivateUnic(v) { this.privateUnic = v; }\n    SetPrivateIcon(v) { this.privateIcon = v; }\n    SetPrivateTimestamp(v) { this.privateTimestamp = v; }\n    SetPrivateCreateAt(v) { this.privateCreateAt = v; }\n    SetPrivateText(v) { this.privateText = v; }\n    SetPrivateLikes(v) { this.privateLikes = v; }\n    SetPrivateFavorite(v) { this.privateFavorite = v; }\n    SetPrivateAnswers(v) { this.privateAnswers = v; }\n    GetPrivateName() { return this.privateName; }\n    GetPrivateUnic() { return this.privateUnic; }\n    GetPrivateIcon() { return this.privateIcon; }\n    GetPrivateTimestamp() { return this.privateTimestamp; }\n    GetPrivateCreateAt() { return this.privateCreateAt; }\n    GetPrivateText() { return this.privateText; }\n    GetPrivateLikes() { return this.privateLikes; }\n    GetPrivateFavorite() { return this.privateFavorite; }\n    GetPrivateAnswers() { return this.privateAnswers; }\n    // PuplicDisplayComment отображение коментария\n    PuplicDisplayComment(innerHTMLElement) {\n        let favoriteTextTemplate, favoriteCssMod;\n        this.privateFavorite ? favoriteTextTemplate = \"в избранном\" : favoriteTextTemplate = \"в избранное\";\n        this.privateFavorite ? favoriteCssMod = \"m-favorites\" : favoriteCssMod = \"\";\n        let wrapper = document.createElement('div');\n        // console.log(\"wrapper\",wrapper);\n        const newComment = `\n    <div class=\"comments__item\" val=\"${this.privateUnic}\">\n    <div class=\"comments__user user\">\n      <img src=\"${this.privateIcon}\" alt=\"\">\n      <div class=\"comments__wrap\">\n        <span>${this.privateName}</span>\n        <span class=\"date\">${this.privateCreateAt}</span>\n      </div>\n    </div>\n    <div class=\"comments__wrapper\">\n      <div class=\"comments__text\">\n        <span>${this.privateText}</span>\n      </div>\n      <div class=\"comments__btns\">\n        <div class=\"comments__answer j-btn-show-fields-for-answer\">\n          <img src=\"img/arrow_right.png\" alt=\"\">\n          <p>ответить</p>\n        </div>\n        <div class=\"comments__greate j-btn-favorites ${favoriteCssMod}\">\n          <img src=\"img/heart_icon.png\" alt=\"\">\n          <p>${favoriteTextTemplate}</p>\n        </div>\n        <div class=\"comments__like\">\n          <p id=\"dis\" class=\"min\"><span>-</span></p>\n          <p id=\"count\" class=\"count\">${this.privateLikes}</p>\n          <p id=\"plus\" class=\"plus\"><span>+</span></p>\n        </div>\n        </div>\n      <div class=\"comments__ans\"></div>  \n      `;\n        wrapper.innerHTML += newComment;\n        innerHTMLElement.insertBefore(wrapper, innerHTMLElement.firstChild);\n    }\n    // PuplicDisplayComment отображение всех отвeтов на коментарий\n    PuplicDisplayCommentAnswers() {\n        console.log(\"TEST\");\n        let commentHTMLElement = document.querySelector(`[val=\"${this.privateUnic}\"]`);\n        let innerHtmlAnswer = commentHTMLElement.querySelector(\".comments__ans\");\n        // console.log(\"innerHtmlAnswer\", innerHtmlAnswer);\n        // console.log(\"this.privateAnswers\", this.privateAnswers);\n        if (!this.privateAnswers) {\n            return;\n        }\n        this.privateAnswers.forEach(answer => {\n            answer.SetPrivateCommentLink(this.GetPrivateUnic());\n            answer.PuplicDisplayAnswer(innerHtmlAnswer);\n            answer.PublicInitBtnMakeLike();\n        });\n    }\n    PuplicSetComment(text) {\n        this.privateUnic = Math.random();\n        this.privateTimestamp = Date.now();\n        this.privateText = text;\n        this.privateIcon = \"img/user1.png\";\n        this.privateName = \"Siesta Cloud\";\n        this.privateLikes = 0;\n        this.privateAnswers = [];\n        this.privateFavorite = false;\n        this.privateCreateAt = new Date().toLocaleTimeString('en-GB', {\n            hour: \"numeric\",\n            minute: \"numeric\",\n            day: \"numeric\",\n            month: \"numeric\"\n        });\n    }\n    //privateSaveComment добавляю новый комментарий в массив в localStorage\n    PublicSaveComment() {\n        let items = localStorage.getItem(\"comments\");\n        let userComments = JSON.parse(items);\n        if (!userComments) {\n            return;\n        }\n        let comments = [];\n        userComments.forEach(comment => {\n            let saveComment = new Comment();\n            saveComment.SetPrivateName(comment.privateName);\n            saveComment.SetPrivateUnic(comment.privateUnic);\n            saveComment.SetPrivateIcon(comment.privateIcon);\n            saveComment.SetPrivateTimestamp(comment.privateTimestamp);\n            saveComment.SetPrivateCreateAt(comment.privateCreateAt);\n            saveComment.SetPrivateText(comment.privateText);\n            saveComment.SetPrivateLikes(comment.privateLikes);\n            saveComment.SetPrivateFavorite(comment.privateFavorite);\n            if (comment.privateAnswers) { // []\n                let answers = [];\n                comment.privateAnswers.forEach(ans => {\n                    let answer = new Answer();\n                    answer.SetPrivateName(ans.privateName);\n                    answer.SetPrivateUnic(ans.privateUnic);\n                    answer.SetPrivateIcon(ans.privateIcon);\n                    answer.SetPrivateTimestamp(ans.privateTimestamp);\n                    answer.SetPrivateCreateAt(ans.privateCreateAt);\n                    answer.SetPrivateText(ans.privateText);\n                    answer.SetPrivateLikes(ans.privateLikes);\n                    answer.SetPrivateFavorite(ans.privateFavorite);\n                    answer.SetPrivateCommentLink(ans.privateCommentLink);\n                    answer.SetPrivateCommentName(ans.privateCommentName);\n                    answers.push(answer);\n                });\n                saveComment.SetPrivateAnswers(answers);\n            }\n            comments.push(saveComment);\n            if (saveComment.GetPrivateUnic() === this.privateUnic) {\n                if (!userComments) {\n                    return;\n                }\n                comments = comments.filter(item => item !== saveComment);\n            }\n        });\n        comments.push(this);\n        // this.Save(JSON.stringify(userComments))\n        // console.log(\"comments\",comments);\n        localStorage.setItem(\"comments\", JSON.stringify(comments));\n    }\n    //? PublicInitBtnShowAnswer обработчик кнопки \"отобразить поле ввода ответа\"\n    //? - вешает обработчик на кнопку \"создать ответ\"\n    PublicInitBtnShowAnswer() {\n        let answerShow = new Answer();\n        //* поиск элементов в DOM\n        let tbtnField = document.querySelector(`[val=\"${this.privateUnic}\"]`);\n        let tBtnShowAnswerField = tbtnField.querySelector(\".j-btn-show-fields-for-answer\");\n        tBtnShowAnswerField.addEventListener('click', () => {\n            answerShow.PublicDisplayFieldsForAnswer(tBtnShowAnswerField.parentElement, this.privateUnic, this.privateName);\n        });\n    }\n    //? PublicInitBtnMakeFavorite обработчик кнопки \"доб в избранное\"\n    //? менят цвет кнопки и сохраняет комментарий в localStorage с обновленным полем Favorite (true|false)\n    PublicInitBtnMakeFavorite() {\n        let commentHtmlEl = document.querySelector(`[val=\"${this.privateUnic}\"]`);\n        let favoriteBtn = commentHtmlEl.querySelector(\".j-btn-favorites\");\n        let favoriteBtnTextVal = favoriteBtn.querySelector(\"p\");\n        favoriteBtn.addEventListener('click', () => {\n            if (!favoriteBtnTextVal) {\n                return;\n            }\n            favoriteBtn.classList.toggle(\"m-favorites\");\n            if (favoriteBtn.classList.contains(\"m-favorites\")) { // селектор (кнопка \"в избранное\" нажата) \n                favoriteBtnTextVal.innerHTML = \"в избранном\";\n                console.log(\"favoriteBtn\", favoriteBtnTextVal);\n                this.privateFavorite = true;\n                this.PublicSaveComment();\n            }\n            else { // селектора нет, коментарий нужно удалить\n                favoriteBtnTextVal.innerHTML = \"в избранное\";\n                this.privateFavorite = false;\n                this.PublicSaveComment();\n            }\n        });\n    }\n    //? PublicInitBtnMakeLike определение обработчиков на кнопки \"лайк\" и \"дизлайк\" комментария\n    PublicInitBtnMakeLike() {\n        let commentHtmlEl = document.querySelector(`[val=\"${this.privateUnic}\"]`);\n        let likeBtn = commentHtmlEl.querySelector(\".plus\");\n        let likeBtnWrapper = likeBtn.parentElement;\n        let disLikeBtn = likeBtnWrapper.querySelector(\"#dis\");\n        let counter = likeBtnWrapper.querySelector(\"#count\");\n        let oldCount = +counter.innerHTML; // 0\n        likeBtn.addEventListener('click', () => {\n            let counter = likeBtnWrapper.querySelector(\"#count\");\n            let count = +counter.innerHTML; // 0\n            let newCount = +count + 1; //1\n            if (count - oldCount == 0 || count - oldCount == -1) {\n                counter.innerHTML = newCount.toString();\n                this.privateLikes = newCount;\n                this.PublicSaveComment();\n            }\n        });\n        disLikeBtn.addEventListener('click', () => {\n            let counter = likeBtnWrapper.querySelector(\"#count\");\n            let count = +counter.innerHTML; // 0\n            let newCount = +count - 1; // 0 -1\n            if (count - oldCount == 1 || count - oldCount == 0) {\n                counter.innerHTML = newCount.toString();\n                this.privateLikes = newCount;\n                this.PublicSaveComment();\n            }\n        });\n    }\n}\nexport default Comment;\n","import Answer from \"../core/answer.js\";\nimport Comment from \"../core/comment.js\";\nclass Storage {\n    Load(key) {\n        let item = localStorage.getItem(key);\n        if (!item) {\n            return null;\n        }\n        let parseItems = JSON.parse(item);\n        let comments = [];\n        parseItems.forEach((parseItem) => {\n            let c = new Comment();\n            c.SetPrivateName(parseItem.privateName);\n            c.SetPrivateUnic(parseItem.privateUnic);\n            c.SetPrivateIcon(parseItem.privateIcon);\n            c.SetPrivateTimestamp(parseItem.privateTimestamp);\n            c.SetPrivateCreateAt(parseItem.privateCreateAt);\n            c.SetPrivateText(parseItem.privateText);\n            c.SetPrivateLikes(parseItem.privateLikes);\n            c.SetPrivateFavorite(parseItem.privateFavorite);\n            if (parseItem.privateAnswers) {\n                let answers = [];\n                if (parseItem.privateAnswers.length > 0) {\n                    parseItem.privateAnswers.forEach(ans => {\n                        let answer = new Answer();\n                        answer.SetPrivateUnic(ans.privateUnic);\n                        answer.SetPrivateText(ans.privateText);\n                        answer.SetPrivateIcon(ans.privateIcon);\n                        answer.SetPrivateName(ans.privateName);\n                        answer.SetPrivateLikes(ans.privateLikes);\n                        answer.SetPrivateFavorite(ans.privateFavorite);\n                        answer.SetPrivateCreateAt(ans.privateCreateAt);\n                        answer.SetPrivateTimestamp(ans.privateTimestamp);\n                        answer.SetPrivateCommentLink(ans.privateCommentLink);\n                        answer.SetPrivateCommentName(ans.privateCommentName);\n                        answers.push(answer);\n                    });\n                }\n                c.SetPrivateAnswers(answers);\n            }\n            comments.push(c);\n        });\n        return comments;\n    }\n    Save(data) {\n        localStorage.setItem(\"comments\", data);\n    }\n}\nexport default Storage;\n","import Storage from \"../db/storage.js\";\nclass Models extends Storage {\n    GetPreviosComments() {\n        let storageData = this.Load(\"comments\");\n        if (!storageData) {\n            storageData = [];\n            //save some comments in localStorage for test ...\n            storageData.push({\n                privateUnic: 0.111111111111111,\n                privateText: \"Самое обидное когда сценарий по сути есть - в виде книг, где нет сюжетных дыр, всё логично, стройное повествование и достаточно взять и экранизировать оригинал как это было в первых фильмах с минимальным количеством отсебятины и зритель с восторгом примет любой такой фильм и сериал, однако вместо этого 'Кольца власти' просто позаимствовали имена из оригинала, куски истории, мало связанные между собой и выдали очередной среднячковый сериал на один раз в лучшем случае.\",\n                privateIcon: \"img/user2.png\",\n                privateName: \"Алексей Румянцев\",\n                privateLikes: 2,\n                privateAnswers: [],\n                privateFavorite: false,\n                privateCreateAt: \"28/11, 21:41\",\n                privateTimestamp: 1669730242100,\n            });\n            storageData.push({\n                privateUnic: 0.222222222222,\n                privateText: \"Наверное, самая большая ошибка создателей сериала была в том, что они поставили уж слишком много надежд на поддержку фанатов вселенной. Как оказалось на деле, большинство 'фанатов' с самой настоящей яростью и желчью стали уничтожать сериал, при этом объективности в отзывах самый минимум.\",\n                privateIcon: \"img/user3.png\",\n                privateName: \"Илья Златов\",\n                privateLikes: 5,\n                privateAnswers: [],\n                privateFavorite: false,\n                privateCreateAt: \"28/11, 21:51\",\n                privateTimestamp: 1669730242900,\n            });\n            this.Save(JSON.stringify(storageData));\n            return;\n        }\n        if (storageData.length > 0) {\n            return;\n        }\n    }\n}\nexport default Models;\n","import Storage from \"../../db/storage.js\";\nimport Comment from \"../../core/comment.js\";\nclass Events extends Storage {\n    //? InitBtnComment обработчик кнопки \"создать комментарий\"\n    InitBtnComment() {\n        let comment = new Comment();\n        //* поиск элементов в DOM\n        let commentBtn = document.querySelector(\".j-btn-send-comment\");\n        let textAreaElement = document.querySelector(\".new__textarea\");\n        let innerHtmlElement = document.querySelector(\".j-new-comment\"); //* целевой элемент, для рендера комментария\n        if (!commentBtn) {\n            return;\n        }\n        commentBtn.addEventListener('click', () => {\n            if (!textAreaElement) {\n                return;\n            }\n            if (!textAreaElement.value) {\n                return;\n            }\n            if (!innerHtmlElement) {\n                return;\n            } //* обработка пустого поля ввода \n            textAreaElement.setAttribute(\"rows\", \"2\"); //* увел. зону ввода комментария\n            comment.PuplicSetComment(textAreaElement.value); //* заполняю коментарий данными\n            comment.PuplicDisplayComment(innerHtmlElement); //* рендер коментария\n            comment.PublicSaveComment(); //* сохранение коментария\n            comment.PublicInitBtnShowAnswer(); //* подключение логики формирования ответов на комментарий\n            comment.PuplicDisplayCommentAnswers(); //* рендер ответов на коментарий\n            comment.PublicInitBtnMakeFavorite(); //* подключение логики формирования свойства \"избранный комментарий\"  \n            comment.PublicInitBtnMakeLike(); //* подключение логики формирования лайков/дизлайков на коментарий \n        });\n    }\n    //? InitBtnSortComments определяю обработчики для \"радио кнопок сортировки\" и кнопки \"избранное\"\n    InitBtnSortComments(innerHtmlElement) {\n        //* поиск элементов в DOM\n        let newCommentField = document.querySelector(`.new`);\n        let innerHtmlElementSort = document.querySelector(`.menu__text`);\n        let showHtmlSort = document.querySelector(`.mod-button`);\n        let sortRadioBtns = document.getElementsByName('level');\n        let sortFavoriteBtn = document.querySelector(\".j-favorites-show\");\n        if (!sortFavoriteBtn) {\n            return;\n        }\n        if (!innerHtmlElementSort) {\n            return;\n        }\n        if (innerHtmlElementSort.innerHTML === \"По дате\") { //* первичная сортировка но времени при открытии(перезагрузке) страницы\n            let comments = this.Load(\"comments\");\n            if (!comments) {\n                return;\n            }\n            this.DisplayComments(comments.sort(function (x, y) { return x.GetPrivateTimestamp() - y.GetPrivateTimestamp(); }), innerHtmlElement);\n        }\n        sortFavoriteBtn.addEventListener('click', () => {\n            let sortComments = [];\n            let comments = this.Load(\"comments\");\n            if (!showHtmlSort) {\n                return;\n            }\n            if (!sortFavoriteBtn) {\n                return;\n            }\n            if (!newCommentField) {\n                return;\n            }\n            if (!comments) {\n                return;\n            }\n            sortFavoriteBtn.classList.toggle(\"m-favorites\"); //* изменяю цвет нажатой кнопки\n            if (sortFavoriteBtn.classList.contains(\"m-favorites\")) { //* если кнопка нажата \n                showHtmlSort.style.pointerEvents = \"none\";\n                newCommentField.style.display = \"none\"; //* удаляю из дом поля ввода (в разд. избран. комменты нельзя доб. коммент) \n                comments.forEach(comment => { if (comment.GetPrivateFavorite()) {\n                    sortComments.push(comment);\n                } });\n                this.DisplayComments(sortComments, innerHtmlElement); //* отобрази только те комментарии где есть поле Favorite\n            }\n            else {\n                showHtmlSort.style.pointerEvents = \"\";\n                newCommentField.style.display = \"\"; //* отображаю дом поля ввода нового комментария \n                this.DisplayComments(comments, innerHtmlElement); //* отобрази все комментарии\n            }\n        });\n        for (let index = 0; index < sortRadioBtns.length; index++) {\n            const sortRadioBtn = sortRadioBtns[index];\n            sortRadioBtn.addEventListener('click', () => {\n                let comments = this.Load(\"comments\");\n                if (!comments) {\n                    return;\n                }\n                switch (sortRadioBtn.value) {\n                    case \"По дате\":\n                        if (!innerHtmlElementSort) {\n                            return;\n                        }\n                        innerHtmlElementSort.innerHTML = \"По дате\";\n                        this.DisplayComments(comments.sort(function (x, y) { return x.GetPrivateTimestamp() - y.GetPrivateTimestamp(); }), innerHtmlElement);\n                        break;\n                    case \"По количеству оценок\":\n                        if (!innerHtmlElementSort) {\n                            return;\n                        }\n                        innerHtmlElementSort.innerHTML = \"По количеству оценок\";\n                        this.DisplayComments(comments.sort(function (x, y) { return x.GetPrivateLikes() - y.GetPrivateLikes(); }), innerHtmlElement);\n                        break;\n                    case \"По количеству ответов\":\n                        if (!innerHtmlElementSort) {\n                            return;\n                        }\n                        innerHtmlElementSort.innerHTML = \"По количеству ответов\";\n                        this.DisplayComments(comments.sort(function (x, y) { return x.GetPrivateAnswers().length - y.GetPrivateAnswers().length; }), innerHtmlElement);\n                        break;\n                }\n            });\n        }\n    }\n    //?DisplayComments принимает список комментариев и рендерит  \n    DisplayComments(comments, innerHtmlElement) {\n        innerHtmlElement.innerHTML = \"\";\n        comments.forEach(comment => {\n            comment.PuplicDisplayComment(innerHtmlElement); //* рендер коментария\n            comment.PublicInitBtnShowAnswer(); //* подключение логики формирования ответов на комментарий\n            comment.PuplicDisplayCommentAnswers(); //* рендер ответов на коментарий\n            comment.PublicInitBtnMakeFavorite(); //* подключение логики формирования свойства \"избранный комментарий\"  \n            comment.PublicInitBtnMakeLike(); //* подключение логики формирования лайков/дизлайков на коментарий \n        });\n    }\n    InitTextAreaBigger() {\n        let tArea = document.querySelector(\".new__textarea\");\n        if (!tArea) {\n            return;\n        }\n        tArea.addEventListener('focus', () => {\n            if (!tArea) {\n                return;\n            }\n            tArea.setAttribute(\"rows\", \"6\");\n        });\n    }\n}\nexport default Events;\n","import Events from \"./events/events.js\";\n// методы кдасса view отображают шаблоны html элементов с нужными данными.\nclass Views extends Events {\n    constructor() {\n        super();\n    }\n    DisplayMain() {\n        this.InitTextAreaBigger();\n        let fieldForNewComment = document.querySelector(\".j-new-comment\");\n        if (!fieldForNewComment) {\n            return;\n        }\n        // console.log(\"view\");\n        this.InitBtnSortComments(fieldForNewComment);\n        this.InitBtnComment();\n    }\n}\nexport default Views;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Controllers from \"./controllers/controllers.js\";\nimport Models from \"./models/models.js\";\nimport Views from \"./views/views.js\";\nimport \"../scss/style.scss\"\nclass App {\n    constructor() {\n        this.privateControllers;\n    }\n    SetPrivateControllers(controller) { this.privateControllers = controller; }\n    Init() {\n        this.privateControllers.PageMain();\n    }\n}\n// Точка входа\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const views = new Views();\n    const models = new Models();\n    const controllers = new Controllers();\n    controllers.SetPrivateModels(models);\n    controllers.SetPrivateViews(views);\n    const app = new App();\n    app.SetPrivateControllers(controllers);\n    app.Init();\n});\n"],"names":[],"sourceRoot":""}